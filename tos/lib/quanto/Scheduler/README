Scheduler
---------
The scheduler for quanto is QuantoSchedulerLpTasksP, as wired in
TinySchedulerC.nc.

This scheduler correctly propagates activity labels as tasks get
scheduled.  It also adds a lowest-priority TaskQuanto queue, that runs
Quanto logging tasks at the lowest priority.  TaskQuanto tasks are
used by the Low-priority serial stack for streaming quanto logging.

The scheduler also allows scheduling TaskQuanto to run under an
activity that is not the current activity when they get scheduled,
without causing extra activity-switches to do that. 



Issue:

QuantoSchedulerLpTasksP has a separate, low priority task queue.
This task queue has a position for each task that is declared of type TaskQuanto.
Specifically, 

  enum
  {
   ...
    NUM_TASKS_Q = uniqueCount("TinySchedulerC.TaskQuanto"),
   ...
  };

  ...

  volatile uint8_t m_q_next[NUM_TASKS_Q];
  volatile act_t m_q_act[NUM_TASKS_Q]; //Quanto: activity of each task

  ...

All is fine and good, except when I am using this scheduler and there are no such tasks declared.
Then the above declarations become respectively uint8_t m_q_next[0] and uint16_t m_q_act[0], which 
causes msp430-gcc to complain with the nasty

app.c:(.text+0x145c): warning: internal error: unsupported relocation error


