3c3
< module QuantoLogCumulativeAMP {
---
> module QuantoLogCumulativeP {
9,10c9
<       interface AMSend;
<       interface Packet;
---
>       interface PortWriter;
13c12
<       //interface Init as WriterInit;
---
>       interface Init as WriterInit;
55,60c54,56
<    ctime_msg_t* m_header_msg;
<    ctime_msg_t* m_body_msg;
<    message_t* m_buf;
< 
<    message_t h_packet;
<    message_t b_packet;
---
>    ctime_msg_t m_header_msg;
>    ctime_msg_t m_body_msg;
>    ctime_msg_t* m_buf;
94,96d89
<       m_header_msg = (ctime_msg_t*)call Packet.getPayload(&h_packet, sizeof(ctime_msg_t));
<       m_body_msg   = (ctime_msg_t*)call Packet.getPayload(&b_packet, sizeof(ctime_msg_t));
< 
98,103c91,96
<       m_header_msg->type = TYPE_CTIME_HEADER;
<       m_header_msg->header.res_count = RESOURCE_COUNT;
<       m_header_msg->header.act_count = ACT_COUNT;
<       for (i = 0; i < (ACT_COUNT); i++) {
<          m_header_msg->header.act_ids[i] = i;
<          m_header_msg->header.first_bind[i] = QUANTO_ACTIVITY(UNKNOWN); 
---
>       m_header_msg.type = TYPE_CTIME_HEADER;
>       m_header_msg.header.res_count = RESOURCE_COUNT;
>       m_header_msg.header.act_count = ACT_COUNT;
>       for (i = 0; i < (ACT_COUNT-1); i++) {
>          m_header_msg.header.act_ids[i] = i;
>          m_header_msg.header.first_bind[i] = QUANTO_ACTIVITY(UNKNOWN); 
105c98
<       //m_header_msg->header.act_ids[ACT_COUNT-1] = QUANTO_ACTIVITY(UNKNOWN);
---
>       m_header_msg.header.act_ids[ACT_COUNT-1] = QUANTO_ACTIVITY(UNKNOWN);
107c100
<       m_body_msg->type = TYPE_CTIME_BODY;
---
>       m_body_msg.type = TYPE_CTIME_BODY;
109c102
<       //call WriterInit.init();
---
>       call WriterInit.init();
169c162
<       m_body_msg->body.res_id = res;
---
>       m_body_msg.body.res_id = res;
172c165
<             m_body_msg->body.time[i] = m_time[slot][res][i]; 
---
>             m_body_msg.body.time[i] = m_time[slot][res][i]; 
194,196c187,189
<          m_header_msg->header.time_base = t_start;
<          m_header_msg->header.total_time = (uint16_t)(t_end - t_start);
<          m_buf = &h_packet;//m_header_msg;
---
>          m_header_msg.header.time_base = t_start;
>          m_header_msg.header.total_time = (uint16_t)(t_end - t_start);
>          m_buf = &m_header_msg;
203c196
<          m_buf = &b_packet;//m_body_msg;
---
>          m_buf = &m_body_msg;
209c202
<       res = call AMSend.send(AM_BROADCAST_ADDR, m_buf, (uint8_t)len);
---
>       res = call PortWriter.write((uint8_t*)m_buf, len);
214c207
<    event void AMSend.sendDone(message_t *buf, error_t result)
---
>    event void PortWriter.writeDone(uint8_t *buf, error_t result)
217c210
<       if (buf == m_buf) {
---
>       if (buf == (uint8_t*)m_buf) {
